// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: puffin.proto

#include "puffin.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_puffin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BitExtent_puffin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_puffin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamInfo_puffin_2eproto;
namespace puffin {
namespace metadata {
class BitExtentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BitExtent> _instance;
} _BitExtent_default_instance_;
class StreamInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamInfo> _instance;
} _StreamInfo_default_instance_;
class PatchHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchHeader> _instance;
} _PatchHeader_default_instance_;
}  // namespace metadata
}  // namespace puffin
static void InitDefaultsscc_info_BitExtent_puffin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::puffin::metadata::_BitExtent_default_instance_;
    new (ptr) ::puffin::metadata::BitExtent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::puffin::metadata::BitExtent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BitExtent_puffin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BitExtent_puffin_2eproto}, {}};

static void InitDefaultsscc_info_PatchHeader_puffin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::puffin::metadata::_PatchHeader_default_instance_;
    new (ptr) ::puffin::metadata::PatchHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::puffin::metadata::PatchHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PatchHeader_puffin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PatchHeader_puffin_2eproto}, {
      &scc_info_StreamInfo_puffin_2eproto.base,}};

static void InitDefaultsscc_info_StreamInfo_puffin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::puffin::metadata::_StreamInfo_default_instance_;
    new (ptr) ::puffin::metadata::StreamInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::puffin::metadata::StreamInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamInfo_puffin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StreamInfo_puffin_2eproto}, {
      &scc_info_BitExtent_puffin_2eproto.base,}};

namespace puffin {
namespace metadata {
bool PatchHeader_PatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PatchHeader_PatchType_strings[2] = {};

static const char PatchHeader_PatchType_names[] =
  "BSDIFF"
  "ZUCCHINI";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PatchHeader_PatchType_entries[] = {
  { {PatchHeader_PatchType_names + 0, 6}, 0 },
  { {PatchHeader_PatchType_names + 6, 8}, 1 },
};

static const int PatchHeader_PatchType_entries_by_number[] = {
  0, // 0 -> BSDIFF
  1, // 1 -> ZUCCHINI
};

const std::string& PatchHeader_PatchType_Name(
    PatchHeader_PatchType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PatchHeader_PatchType_entries,
          PatchHeader_PatchType_entries_by_number,
          2, PatchHeader_PatchType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PatchHeader_PatchType_entries,
      PatchHeader_PatchType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PatchHeader_PatchType_strings[idx].get();
}
bool PatchHeader_PatchType_Parse(
    const std::string& name, PatchHeader_PatchType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PatchHeader_PatchType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<PatchHeader_PatchType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PatchHeader_PatchType PatchHeader::BSDIFF;
constexpr PatchHeader_PatchType PatchHeader::ZUCCHINI;
constexpr PatchHeader_PatchType PatchHeader::PatchType_MIN;
constexpr PatchHeader_PatchType PatchHeader::PatchType_MAX;
constexpr int PatchHeader::PatchType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void BitExtent::InitAsDefaultInstance() {
}
class BitExtent::_Internal {
 public:
};

BitExtent::BitExtent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:puffin.metadata.BitExtent)
}
BitExtent::BitExtent(const BitExtent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:puffin.metadata.BitExtent)
}

void BitExtent::SharedCtor() {
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(length_));
}

BitExtent::~BitExtent() {
  // @@protoc_insertion_point(destructor:puffin.metadata.BitExtent)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void BitExtent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BitExtent::ArenaDtor(void* object) {
  BitExtent* _this = reinterpret_cast< BitExtent* >(object);
  (void)_this;
}
void BitExtent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BitExtent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BitExtent& BitExtent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BitExtent_puffin_2eproto.base);
  return *internal_default_instance();
}


void BitExtent::Clear() {
// @@protoc_insertion_point(message_clear_start:puffin.metadata.BitExtent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  _internal_metadata_.Clear<std::string>();
}

const char* BitExtent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BitExtent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:puffin.metadata.BitExtent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 offset = 1;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_offset(), target);
  }

  // uint64 length = 2;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:puffin.metadata.BitExtent)
  return target;
}

size_t BitExtent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:puffin.metadata.BitExtent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 offset = 1;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_offset());
  }

  // uint64 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitExtent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BitExtent*>(
      &from));
}

void BitExtent::MergeFrom(const BitExtent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:puffin.metadata.BitExtent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
}

void BitExtent::CopyFrom(const BitExtent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:puffin.metadata.BitExtent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitExtent::IsInitialized() const {
  return true;
}

void BitExtent::InternalSwap(BitExtent* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BitExtent, length_)
      + sizeof(BitExtent::length_)
      - PROTOBUF_FIELD_OFFSET(BitExtent, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

std::string BitExtent::GetTypeName() const {
  return "puffin.metadata.BitExtent";
}


// ===================================================================

void StreamInfo::InitAsDefaultInstance() {
}
class StreamInfo::_Internal {
 public:
};

StreamInfo::StreamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  deflates_(arena),
  puffs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:puffin.metadata.StreamInfo)
}
StreamInfo::StreamInfo(const StreamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      deflates_(from.deflates_),
      puffs_(from.puffs_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  puff_length_ = from.puff_length_;
  // @@protoc_insertion_point(copy_constructor:puffin.metadata.StreamInfo)
}

void StreamInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamInfo_puffin_2eproto.base);
  puff_length_ = PROTOBUF_ULONGLONG(0);
}

StreamInfo::~StreamInfo() {
  // @@protoc_insertion_point(destructor:puffin.metadata.StreamInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StreamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StreamInfo::ArenaDtor(void* object) {
  StreamInfo* _this = reinterpret_cast< StreamInfo* >(object);
  (void)_this;
}
void StreamInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamInfo& StreamInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamInfo_puffin_2eproto.base);
  return *internal_default_instance();
}


void StreamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:puffin.metadata.StreamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deflates_.Clear();
  puffs_.Clear();
  puff_length_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* StreamInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .puffin.metadata.BitExtent deflates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deflates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .puffin.metadata.BitExtent puffs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_puffs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 puff_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          puff_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:puffin.metadata.StreamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .puffin.metadata.BitExtent deflates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deflates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_deflates(i), target, stream);
  }

  // repeated .puffin.metadata.BitExtent puffs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_puffs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_puffs(i), target, stream);
  }

  // uint64 puff_length = 3;
  if (this->puff_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_puff_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:puffin.metadata.StreamInfo)
  return target;
}

size_t StreamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:puffin.metadata.StreamInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .puffin.metadata.BitExtent deflates = 1;
  total_size += 1UL * this->_internal_deflates_size();
  for (const auto& msg : this->deflates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .puffin.metadata.BitExtent puffs = 2;
  total_size += 1UL * this->_internal_puffs_size();
  for (const auto& msg : this->puffs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 puff_length = 3;
  if (this->puff_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_puff_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StreamInfo*>(
      &from));
}

void StreamInfo::MergeFrom(const StreamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:puffin.metadata.StreamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deflates_.MergeFrom(from.deflates_);
  puffs_.MergeFrom(from.puffs_);
  if (from.puff_length() != 0) {
    _internal_set_puff_length(from._internal_puff_length());
  }
}

void StreamInfo::CopyFrom(const StreamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:puffin.metadata.StreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamInfo::IsInitialized() const {
  return true;
}

void StreamInfo::InternalSwap(StreamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  deflates_.InternalSwap(&other->deflates_);
  puffs_.InternalSwap(&other->puffs_);
  swap(puff_length_, other->puff_length_);
}

std::string StreamInfo::GetTypeName() const {
  return "puffin.metadata.StreamInfo";
}


// ===================================================================

void PatchHeader::InitAsDefaultInstance() {
  ::puffin::metadata::_PatchHeader_default_instance_._instance.get_mutable()->src_ = const_cast< ::puffin::metadata::StreamInfo*>(
      ::puffin::metadata::StreamInfo::internal_default_instance());
  ::puffin::metadata::_PatchHeader_default_instance_._instance.get_mutable()->dst_ = const_cast< ::puffin::metadata::StreamInfo*>(
      ::puffin::metadata::StreamInfo::internal_default_instance());
}
class PatchHeader::_Internal {
 public:
  static const ::puffin::metadata::StreamInfo& src(const PatchHeader* msg);
  static const ::puffin::metadata::StreamInfo& dst(const PatchHeader* msg);
};

const ::puffin::metadata::StreamInfo&
PatchHeader::_Internal::src(const PatchHeader* msg) {
  return *msg->src_;
}
const ::puffin::metadata::StreamInfo&
PatchHeader::_Internal::dst(const PatchHeader* msg) {
  return *msg->dst_;
}
PatchHeader::PatchHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:puffin.metadata.PatchHeader)
}
PatchHeader::PatchHeader(const PatchHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_src()) {
    src_ = new ::puffin::metadata::StreamInfo(*from.src_);
  } else {
    src_ = nullptr;
  }
  if (from._internal_has_dst()) {
    dst_ = new ::puffin::metadata::StreamInfo(*from.dst_);
  } else {
    dst_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&version_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:puffin.metadata.PatchHeader)
}

void PatchHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchHeader_puffin_2eproto.base);
  ::memset(&src_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&src_)) + sizeof(type_));
}

PatchHeader::~PatchHeader() {
  // @@protoc_insertion_point(destructor:puffin.metadata.PatchHeader)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PatchHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete src_;
  if (this != internal_default_instance()) delete dst_;
}

void PatchHeader::ArenaDtor(void* object) {
  PatchHeader* _this = reinterpret_cast< PatchHeader* >(object);
  (void)_this;
}
void PatchHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchHeader& PatchHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchHeader_puffin_2eproto.base);
  return *internal_default_instance();
}


void PatchHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:puffin.metadata.PatchHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && src_ != nullptr) {
    delete src_;
  }
  src_ = nullptr;
  if (GetArena() == nullptr && dst_ != nullptr) {
    delete dst_;
  }
  dst_ = nullptr;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&version_)) + sizeof(type_));
  _internal_metadata_.Clear<std::string>();
}

const char* PatchHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .puffin.metadata.StreamInfo src = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_src(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .puffin.metadata.StreamInfo dst = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .puffin.metadata.PatchHeader.PatchType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::puffin::metadata::PatchHeader_PatchType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:puffin.metadata.PatchHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // .puffin.metadata.StreamInfo src = 2;
  if (this->has_src()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::src(this), target, stream);
  }

  // .puffin.metadata.StreamInfo dst = 3;
  if (this->has_dst()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dst(this), target, stream);
  }

  // .puffin.metadata.PatchHeader.PatchType type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:puffin.metadata.PatchHeader)
  return target;
}

size_t PatchHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:puffin.metadata.PatchHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .puffin.metadata.StreamInfo src = 2;
  if (this->has_src()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);
  }

  // .puffin.metadata.StreamInfo dst = 3;
  if (this->has_dst()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dst_);
  }

  // int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  // .puffin.metadata.PatchHeader.PatchType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchHeader::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PatchHeader*>(
      &from));
}

void PatchHeader::MergeFrom(const PatchHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:puffin.metadata.PatchHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_src()) {
    _internal_mutable_src()->::puffin::metadata::StreamInfo::MergeFrom(from._internal_src());
  }
  if (from.has_dst()) {
    _internal_mutable_dst()->::puffin::metadata::StreamInfo::MergeFrom(from._internal_dst());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void PatchHeader::CopyFrom(const PatchHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:puffin.metadata.PatchHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchHeader::IsInitialized() const {
  return true;
}

void PatchHeader::InternalSwap(PatchHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PatchHeader, type_)
      + sizeof(PatchHeader::type_)
      - PROTOBUF_FIELD_OFFSET(PatchHeader, src_)>(
          reinterpret_cast<char*>(&src_),
          reinterpret_cast<char*>(&other->src_));
}

std::string PatchHeader::GetTypeName() const {
  return "puffin.metadata.PatchHeader";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metadata
}  // namespace puffin
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::puffin::metadata::BitExtent* Arena::CreateMaybeMessage< ::puffin::metadata::BitExtent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::puffin::metadata::BitExtent >(arena);
}
template<> PROTOBUF_NOINLINE ::puffin::metadata::StreamInfo* Arena::CreateMaybeMessage< ::puffin::metadata::StreamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::puffin::metadata::StreamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::puffin::metadata::PatchHeader* Arena::CreateMaybeMessage< ::puffin::metadata::PatchHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::puffin::metadata::PatchHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
