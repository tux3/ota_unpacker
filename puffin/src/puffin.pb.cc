// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: puffin.proto

#include "puffin.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace puffin {
namespace metadata {
PROTOBUF_CONSTEXPR BitExtent::BitExtent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.offset_)*/uint64_t{0u}
  , /*decltype(_impl_.length_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BitExtentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BitExtentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BitExtentDefaultTypeInternal() {}
  union {
    BitExtent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BitExtentDefaultTypeInternal _BitExtent_default_instance_;
PROTOBUF_CONSTEXPR StreamInfo::StreamInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.deflates_)*/{}
  , /*decltype(_impl_.puffs_)*/{}
  , /*decltype(_impl_.puff_length_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamInfoDefaultTypeInternal() {}
  union {
    StreamInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamInfoDefaultTypeInternal _StreamInfo_default_instance_;
PROTOBUF_CONSTEXPR PatchHeader::PatchHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/nullptr
  , /*decltype(_impl_.dst_)*/nullptr
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatchHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchHeaderDefaultTypeInternal() {}
  union {
    PatchHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchHeaderDefaultTypeInternal _PatchHeader_default_instance_;
}  // namespace metadata
}  // namespace puffin
namespace puffin {
namespace metadata {
bool PatchHeader_PatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PatchHeader_PatchType_strings[2] = {};

static const char PatchHeader_PatchType_names[] =
  "BSDIFF"
  "ZUCCHINI";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PatchHeader_PatchType_entries[] = {
  { {PatchHeader_PatchType_names + 0, 6}, 0 },
  { {PatchHeader_PatchType_names + 6, 8}, 1 },
};

static const int PatchHeader_PatchType_entries_by_number[] = {
  0, // 0 -> BSDIFF
  1, // 1 -> ZUCCHINI
};

const std::string& PatchHeader_PatchType_Name(
    PatchHeader_PatchType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PatchHeader_PatchType_entries,
          PatchHeader_PatchType_entries_by_number,
          2, PatchHeader_PatchType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PatchHeader_PatchType_entries,
      PatchHeader_PatchType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PatchHeader_PatchType_strings[idx].get();
}
bool PatchHeader_PatchType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PatchHeader_PatchType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PatchHeader_PatchType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<PatchHeader_PatchType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PatchHeader_PatchType PatchHeader::BSDIFF;
constexpr PatchHeader_PatchType PatchHeader::ZUCCHINI;
constexpr PatchHeader_PatchType PatchHeader::PatchType_MIN;
constexpr PatchHeader_PatchType PatchHeader::PatchType_MAX;
constexpr int PatchHeader::PatchType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class BitExtent::_Internal {
 public:
};

BitExtent::BitExtent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:puffin.metadata.BitExtent)
}
BitExtent::BitExtent(const BitExtent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BitExtent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.offset_){}
    , decltype(_impl_.length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.offset_, &from._impl_.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.length_) -
    reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.length_));
  // @@protoc_insertion_point(copy_constructor:puffin.metadata.BitExtent)
}

inline void BitExtent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.offset_){uint64_t{0u}}
    , decltype(_impl_.length_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BitExtent::~BitExtent() {
  // @@protoc_insertion_point(destructor:puffin.metadata.BitExtent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BitExtent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BitExtent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BitExtent::Clear() {
// @@protoc_insertion_point(message_clear_start:puffin.metadata.BitExtent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.length_) -
      reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.length_));
  _internal_metadata_.Clear<std::string>();
}

const char* BitExtent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BitExtent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:puffin.metadata.BitExtent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 offset = 1;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_offset(), target);
  }

  // uint64 length = 2;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:puffin.metadata.BitExtent)
  return target;
}

size_t BitExtent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:puffin.metadata.BitExtent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 offset = 1;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
  }

  // uint64 length = 2;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitExtent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BitExtent*>(
      &from));
}

void BitExtent::MergeFrom(const BitExtent& from) {
  BitExtent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:puffin.metadata.BitExtent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BitExtent::CopyFrom(const BitExtent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:puffin.metadata.BitExtent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitExtent::IsInitialized() const {
  return true;
}

void BitExtent::InternalSwap(BitExtent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BitExtent, _impl_.length_)
      + sizeof(BitExtent::_impl_.length_)
      - PROTOBUF_FIELD_OFFSET(BitExtent, _impl_.offset_)>(
          reinterpret_cast<char*>(&_impl_.offset_),
          reinterpret_cast<char*>(&other->_impl_.offset_));
}

std::string BitExtent::GetTypeName() const {
  return "puffin.metadata.BitExtent";
}


// ===================================================================

class StreamInfo::_Internal {
 public:
};

StreamInfo::StreamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:puffin.metadata.StreamInfo)
}
StreamInfo::StreamInfo(const StreamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StreamInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.deflates_){from._impl_.deflates_}
    , decltype(_impl_.puffs_){from._impl_.puffs_}
    , decltype(_impl_.puff_length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.puff_length_ = from._impl_.puff_length_;
  // @@protoc_insertion_point(copy_constructor:puffin.metadata.StreamInfo)
}

inline void StreamInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.deflates_){arena}
    , decltype(_impl_.puffs_){arena}
    , decltype(_impl_.puff_length_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamInfo::~StreamInfo() {
  // @@protoc_insertion_point(destructor:puffin.metadata.StreamInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deflates_.~RepeatedPtrField();
  _impl_.puffs_.~RepeatedPtrField();
}

void StreamInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:puffin.metadata.StreamInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deflates_.Clear();
  _impl_.puffs_.Clear();
  _impl_.puff_length_ = uint64_t{0u};
  _internal_metadata_.Clear<std::string>();
}

const char* StreamInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .puffin.metadata.BitExtent deflates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deflates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .puffin.metadata.BitExtent puffs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_puffs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 puff_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.puff_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:puffin.metadata.StreamInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .puffin.metadata.BitExtent deflates = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_deflates_size()); i < n; i++) {
    const auto& repfield = this->_internal_deflates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .puffin.metadata.BitExtent puffs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_puffs_size()); i < n; i++) {
    const auto& repfield = this->_internal_puffs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 puff_length = 3;
  if (this->_internal_puff_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_puff_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:puffin.metadata.StreamInfo)
  return target;
}

size_t StreamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:puffin.metadata.StreamInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .puffin.metadata.BitExtent deflates = 1;
  total_size += 1UL * this->_internal_deflates_size();
  for (const auto& msg : this->_impl_.deflates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .puffin.metadata.BitExtent puffs = 2;
  total_size += 1UL * this->_internal_puffs_size();
  for (const auto& msg : this->_impl_.puffs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 puff_length = 3;
  if (this->_internal_puff_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_puff_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StreamInfo*>(
      &from));
}

void StreamInfo::MergeFrom(const StreamInfo& from) {
  StreamInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:puffin.metadata.StreamInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.deflates_.MergeFrom(from._impl_.deflates_);
  _this->_impl_.puffs_.MergeFrom(from._impl_.puffs_);
  if (from._internal_puff_length() != 0) {
    _this->_internal_set_puff_length(from._internal_puff_length());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StreamInfo::CopyFrom(const StreamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:puffin.metadata.StreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamInfo::IsInitialized() const {
  return true;
}

void StreamInfo::InternalSwap(StreamInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.deflates_.InternalSwap(&other->_impl_.deflates_);
  _impl_.puffs_.InternalSwap(&other->_impl_.puffs_);
  swap(_impl_.puff_length_, other->_impl_.puff_length_);
}

std::string StreamInfo::GetTypeName() const {
  return "puffin.metadata.StreamInfo";
}


// ===================================================================

class PatchHeader::_Internal {
 public:
  static const ::puffin::metadata::StreamInfo& src(const PatchHeader* msg);
  static const ::puffin::metadata::StreamInfo& dst(const PatchHeader* msg);
};

const ::puffin::metadata::StreamInfo&
PatchHeader::_Internal::src(const PatchHeader* msg) {
  return *msg->_impl_.src_;
}
const ::puffin::metadata::StreamInfo&
PatchHeader::_Internal::dst(const PatchHeader* msg) {
  return *msg->_impl_.dst_;
}
PatchHeader::PatchHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:puffin.metadata.PatchHeader)
}
PatchHeader::PatchHeader(const PatchHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PatchHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){nullptr}
    , decltype(_impl_.dst_){nullptr}
    , decltype(_impl_.version_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_src()) {
    _this->_impl_.src_ = new ::puffin::metadata::StreamInfo(*from._impl_.src_);
  }
  if (from._internal_has_dst()) {
    _this->_impl_.dst_ = new ::puffin::metadata::StreamInfo(*from._impl_.dst_);
  }
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:puffin.metadata.PatchHeader)
}

inline void PatchHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){nullptr}
    , decltype(_impl_.dst_){nullptr}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PatchHeader::~PatchHeader() {
  // @@protoc_insertion_point(destructor:puffin.metadata.PatchHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatchHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.src_;
  if (this != internal_default_instance()) delete _impl_.dst_;
}

void PatchHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatchHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:puffin.metadata.PatchHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.src_ != nullptr) {
    delete _impl_.src_;
  }
  _impl_.src_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dst_ != nullptr) {
    delete _impl_.dst_;
  }
  _impl_.dst_ = nullptr;
  ::memset(&_impl_.version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<std::string>();
}

const char* PatchHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .puffin.metadata.StreamInfo src = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_src(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .puffin.metadata.StreamInfo dst = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .puffin.metadata.PatchHeader.PatchType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::puffin::metadata::PatchHeader_PatchType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatchHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:puffin.metadata.PatchHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // .puffin.metadata.StreamInfo src = 2;
  if (this->_internal_has_src()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::src(this),
        _Internal::src(this).GetCachedSize(), target, stream);
  }

  // .puffin.metadata.StreamInfo dst = 3;
  if (this->_internal_has_dst()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::dst(this),
        _Internal::dst(this).GetCachedSize(), target, stream);
  }

  // .puffin.metadata.PatchHeader.PatchType type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:puffin.metadata.PatchHeader)
  return target;
}

size_t PatchHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:puffin.metadata.PatchHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .puffin.metadata.StreamInfo src = 2;
  if (this->_internal_has_src()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.src_);
  }

  // .puffin.metadata.StreamInfo dst = 3;
  if (this->_internal_has_dst()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dst_);
  }

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  // .puffin.metadata.PatchHeader.PatchType type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchHeader::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PatchHeader*>(
      &from));
}

void PatchHeader::MergeFrom(const PatchHeader& from) {
  PatchHeader* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:puffin.metadata.PatchHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_src()) {
    _this->_internal_mutable_src()->::puffin::metadata::StreamInfo::MergeFrom(
        from._internal_src());
  }
  if (from._internal_has_dst()) {
    _this->_internal_mutable_dst()->::puffin::metadata::StreamInfo::MergeFrom(
        from._internal_dst());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PatchHeader::CopyFrom(const PatchHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:puffin.metadata.PatchHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchHeader::IsInitialized() const {
  return true;
}

void PatchHeader::InternalSwap(PatchHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PatchHeader, _impl_.type_)
      + sizeof(PatchHeader::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(PatchHeader, _impl_.src_)>(
          reinterpret_cast<char*>(&_impl_.src_),
          reinterpret_cast<char*>(&other->_impl_.src_));
}

std::string PatchHeader::GetTypeName() const {
  return "puffin.metadata.PatchHeader";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metadata
}  // namespace puffin
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::puffin::metadata::BitExtent*
Arena::CreateMaybeMessage< ::puffin::metadata::BitExtent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::puffin::metadata::BitExtent >(arena);
}
template<> PROTOBUF_NOINLINE ::puffin::metadata::StreamInfo*
Arena::CreateMaybeMessage< ::puffin::metadata::StreamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::puffin::metadata::StreamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::puffin::metadata::PatchHeader*
Arena::CreateMaybeMessage< ::puffin::metadata::PatchHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::puffin::metadata::PatchHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
